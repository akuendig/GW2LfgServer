// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LfgService_CreateGroup_FullMethodName             = "/gw2lfg.LfgService/CreateGroup"
	LfgService_ListGroups_FullMethodName              = "/gw2lfg.LfgService/ListGroups"
	LfgService_DeleteGroup_FullMethodName             = "/gw2lfg.LfgService/DeleteGroup"
	LfgService_SubscribeGroups_FullMethodName         = "/gw2lfg.LfgService/SubscribeGroups"
	LfgService_JoinGroup_FullMethodName               = "/gw2lfg.LfgService/JoinGroup"
	LfgService_SubscribeToApplications_FullMethodName = "/gw2lfg.LfgService/SubscribeToApplications"
)

// LfgServiceClient is the client API for LfgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LfgServiceClient interface {
	// Operations that don't need streaming
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error)
	ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error)
	SubscribeGroups(ctx context.Context, in *SubscribeGroupsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GroupsUpdate], error)
	JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*JoinGroupResponse, error)
	// Group creator's stream to receive applications
	SubscribeToApplications(ctx context.Context, in *SubscribeToApplicationsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JoinGroupRequest], error)
}

type lfgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLfgServiceClient(cc grpc.ClientConnInterface) LfgServiceClient {
	return &lfgServiceClient{cc}
}

func (c *lfgServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Group)
	err := c.cc.Invoke(ctx, LfgService_CreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lfgServiceClient) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGroupsResponse)
	err := c.cc.Invoke(ctx, LfgService_ListGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lfgServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGroupResponse)
	err := c.cc.Invoke(ctx, LfgService_DeleteGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lfgServiceClient) SubscribeGroups(ctx context.Context, in *SubscribeGroupsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GroupsUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LfgService_ServiceDesc.Streams[0], LfgService_SubscribeGroups_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeGroupsRequest, GroupsUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LfgService_SubscribeGroupsClient = grpc.ServerStreamingClient[GroupsUpdate]

func (c *lfgServiceClient) JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*JoinGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinGroupResponse)
	err := c.cc.Invoke(ctx, LfgService_JoinGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lfgServiceClient) SubscribeToApplications(ctx context.Context, in *SubscribeToApplicationsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JoinGroupRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LfgService_ServiceDesc.Streams[1], LfgService_SubscribeToApplications_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeToApplicationsRequest, JoinGroupRequest]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LfgService_SubscribeToApplicationsClient = grpc.ServerStreamingClient[JoinGroupRequest]

// LfgServiceServer is the server API for LfgService service.
// All implementations must embed UnimplementedLfgServiceServer
// for forward compatibility.
type LfgServiceServer interface {
	// Operations that don't need streaming
	CreateGroup(context.Context, *CreateGroupRequest) (*Group, error)
	ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error)
	SubscribeGroups(*SubscribeGroupsRequest, grpc.ServerStreamingServer[GroupsUpdate]) error
	JoinGroup(context.Context, *JoinGroupRequest) (*JoinGroupResponse, error)
	// Group creator's stream to receive applications
	SubscribeToApplications(*SubscribeToApplicationsRequest, grpc.ServerStreamingServer[JoinGroupRequest]) error
	mustEmbedUnimplementedLfgServiceServer()
}

// UnimplementedLfgServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLfgServiceServer struct{}

func (UnimplementedLfgServiceServer) CreateGroup(context.Context, *CreateGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedLfgServiceServer) ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (UnimplementedLfgServiceServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedLfgServiceServer) SubscribeGroups(*SubscribeGroupsRequest, grpc.ServerStreamingServer[GroupsUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeGroups not implemented")
}
func (UnimplementedLfgServiceServer) JoinGroup(context.Context, *JoinGroupRequest) (*JoinGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedLfgServiceServer) SubscribeToApplications(*SubscribeToApplicationsRequest, grpc.ServerStreamingServer[JoinGroupRequest]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToApplications not implemented")
}
func (UnimplementedLfgServiceServer) mustEmbedUnimplementedLfgServiceServer() {}
func (UnimplementedLfgServiceServer) testEmbeddedByValue()                    {}

// UnsafeLfgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LfgServiceServer will
// result in compilation errors.
type UnsafeLfgServiceServer interface {
	mustEmbedUnimplementedLfgServiceServer()
}

func RegisterLfgServiceServer(s grpc.ServiceRegistrar, srv LfgServiceServer) {
	// If the following call pancis, it indicates UnimplementedLfgServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LfgService_ServiceDesc, srv)
}

func _LfgService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LfgServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LfgService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LfgServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LfgService_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LfgServiceServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LfgService_ListGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LfgServiceServer).ListGroups(ctx, req.(*ListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LfgService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LfgServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LfgService_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LfgServiceServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LfgService_SubscribeGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeGroupsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LfgServiceServer).SubscribeGroups(m, &grpc.GenericServerStream[SubscribeGroupsRequest, GroupsUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LfgService_SubscribeGroupsServer = grpc.ServerStreamingServer[GroupsUpdate]

func _LfgService_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LfgServiceServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LfgService_JoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LfgServiceServer).JoinGroup(ctx, req.(*JoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LfgService_SubscribeToApplications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToApplicationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LfgServiceServer).SubscribeToApplications(m, &grpc.GenericServerStream[SubscribeToApplicationsRequest, JoinGroupRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LfgService_SubscribeToApplicationsServer = grpc.ServerStreamingServer[JoinGroupRequest]

// LfgService_ServiceDesc is the grpc.ServiceDesc for LfgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LfgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gw2lfg.LfgService",
	HandlerType: (*LfgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _LfgService_CreateGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _LfgService_ListGroups_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _LfgService_DeleteGroup_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _LfgService_JoinGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeGroups",
			Handler:       _LfgService_SubscribeGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToApplications",
			Handler:       _LfgService_SubscribeToApplications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
